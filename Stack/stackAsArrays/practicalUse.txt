Implementation of this program in -> main.cpp

HIGHEST GPA

In this example, we write a C++ program that reads a data file consisting of each
student’s GPA followed by the student’s name. The program then prints the highest
GPA and the names of all the students who received that GPA. The program scans the
input file only once. Moreover, we assume that there are a maximum of 100 students
in the class.

Input:
The program reads an input file consisting of each student’s GPA, followed by the
student’s name. 
Sample data is as follows:

Output:
3.53.62.73.93.43.93.4Bill
John
Lisa
Kathy
Jason
David
Jack

The program outputs the highest GPA and all the names associated with the
highest GPA. For example, for the preceding data, the highest GPA is 3.9 and
the students with that GPA are Kathy and David.

Algorithm Analysis and Design

We read the first GPA and the name of the student. Because this data is the first item read,
it is the highest GPA so far. Next, we read the second GPA and the name of the student.
We then compare this (second) GPA with the highest GPA so far. Three cases arise:

1. The new GPA is greater than the highest GPA so far. In this case, we
do the following:
  a. Update the value of the highest GPA so far.
  b. Initialize the stack—that is, remove the names of the students
  from the stack.
  c. Save the name of the student having the highest GPA so far in
  the stack.

2. The new GPA is equal to the highest GPA so far. In this case, we
add the name of the new student to the stack.

3. The new GPA is smaller than the highest GPA so far. In this case,
we discard the name of the student having this grade.
We then read the next GPA and the name of the student, and repeat Steps 1
through 3. 

We continue this process until we reach the end of file.
From this discussion, it is clear that we need the following variables:

float GPA; //variable to hold the current GPA

float highestGPA; //variable to hold the highest GPA

string name;
 //variable to hold the name of the student

StackType<string> stack(100); //object to implement the stack

The previous discussion translates into the following algorithm:
1. Declare the variables and initialize stack.
2. Open the input file.
3. If the input file does not exist, exit the program.
4. Set the output of the floating-point numbers to a fixed decimal
format with a decimal point and trailing zeroes. Also, set the preci-
sion to two decimal places.
5. Read the GPA and the student name.
6. highestGPA = GPA;
7. while (not end of file)
  {
    7.1. if (GPA > highestGPA)
    {
      7.1.1. initializeStack(stack);
      7.1.2. push(stack, student name);
      7.1.3. highestGPA = GPA;
    }
    7.2. else
      if (GPA is equal to highestGPA)
        push(stack, student name);
    7.3. Read GPA and student name;
  }

8. Output the highest GPA.
9. Output the names of the students having the highest GPA.
